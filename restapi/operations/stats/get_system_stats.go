// Code generated by go-swagger; DO NOT EDIT.

package stats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSystemStatsHandlerFunc turns a function with the right signature into a get system stats handler
type GetSystemStatsHandlerFunc func(GetSystemStatsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSystemStatsHandlerFunc) Handle(params GetSystemStatsParams) middleware.Responder {
	return fn(params)
}

// GetSystemStatsHandler interface for that can handle valid get system stats params
type GetSystemStatsHandler interface {
	Handle(GetSystemStatsParams) middleware.Responder
}

// NewGetSystemStats creates a new http.Handler for the get system stats operation
func NewGetSystemStats(ctx *middleware.Context, handler GetSystemStatsHandler) *GetSystemStats {
	return &GetSystemStats{Context: ctx, Handler: handler}
}

/*GetSystemStats swagger:route GET /stats stats getSystemStats

Get system statistics

Get system statistics

*/
type GetSystemStats struct {
	Context *middleware.Context
	Handler GetSystemStatsHandler
}

func (o *GetSystemStats) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSystemStatsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
