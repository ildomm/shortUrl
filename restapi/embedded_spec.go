// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the API specification for Linx challenge project",
    "title": "Linx API",
    "version": "0.1.0"
  },
  "host": "api.poc.com",
  "basePath": "/v1",
  "paths": {
    "/*": {
      "options": {
        "security": [],
        "produces": [
          "application/json"
        ],
        "operationId": "optionsAllow",
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/stats": {
      "get": {
        "description": "Get system statistics",
        "tags": [
          "stats"
        ],
        "summary": "Get system statistics",
        "operationId": "getSystemStats",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/GeneralError"
            }
          }
        }
      }
    },
    "/stats/{id}": {
      "get": {
        "description": "Get url statistics",
        "tags": [
          "stats"
        ],
        "summary": "Get url statistics",
        "operationId": "getUrlStats",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Url"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/GeneralError"
            }
          }
        }
      }
    },
    "/urls/{id}": {
      "get": {
        "description": "Get a Url redirection",
        "tags": [
          "urls"
        ],
        "summary": "Get a Url redirection",
        "operationId": "redirectUrl",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "successful operation",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Url not found"
          }
        }
      },
      "delete": {
        "tags": [
          "urls"
        ],
        "summary": "Delete url",
        "operationId": "deleteUrl",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Url not found"
          }
        }
      }
    },
    "/user/{userId}": {
      "delete": {
        "security": [],
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users": {
      "post": {
        "security": [],
        "tags": [
          "users"
        ],
        "summary": "Creates new user",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/GeneralError"
            }
          }
        }
      }
    },
    "/users/{userId}/stats": {
      "get": {
        "description": "Get user statistics",
        "tags": [
          "stats"
        ],
        "summary": "Get user statistics",
        "operationId": "getUserStats",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/GeneralError"
            }
          }
        }
      }
    },
    "/users/{userId}/urls": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates new url",
        "operationId": "createUrl",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "url",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Url"
            }
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/GeneralError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "GeneralError": {
      "properties": {
        "code": {
          "type": "integer",
          "format": "int"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Stats": {
      "type": "object",
      "properties": {
        "hits": {
          "type": "integer"
        },
        "topUrls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Url"
          }
        },
        "urlCount": {
          "type": "integer"
        }
      }
    },
    "Url": {
      "type": "object",
      "properties": {
        "hits": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "shortUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "User actions",
      "name": "users"
    },
    {
      "description": "Urls management",
      "name": "urls"
    },
    {
      "description": "System information",
      "name": "stats"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is the API specification for Linx challenge project",
    "title": "Linx API",
    "version": "0.1.0"
  },
  "host": "api.poc.com",
  "basePath": "/v1",
  "paths": {
    "/*": {
      "options": {
        "security": [],
        "produces": [
          "application/json"
        ],
        "operationId": "optionsAllow",
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/stats": {
      "get": {
        "description": "Get system statistics",
        "tags": [
          "stats"
        ],
        "summary": "Get system statistics",
        "operationId": "getSystemStats",
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/GeneralError"
            }
          }
        }
      }
    },
    "/stats/{id}": {
      "get": {
        "description": "Get url statistics",
        "tags": [
          "stats"
        ],
        "summary": "Get url statistics",
        "operationId": "getUrlStats",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Url"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/GeneralError"
            }
          }
        }
      }
    },
    "/urls/{id}": {
      "get": {
        "description": "Get a Url redirection",
        "tags": [
          "urls"
        ],
        "summary": "Get a Url redirection",
        "operationId": "redirectUrl",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "302": {
            "description": "successful operation",
            "headers": {
              "Location": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "Url not found"
          }
        }
      },
      "delete": {
        "tags": [
          "urls"
        ],
        "summary": "Delete url",
        "operationId": "deleteUrl",
        "parameters": [
          {
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "Url not found"
          }
        }
      }
    },
    "/user/{userId}": {
      "delete": {
        "security": [],
        "tags": [
          "users"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/users": {
      "post": {
        "security": [],
        "tags": [
          "users"
        ],
        "summary": "Creates new user",
        "operationId": "createUser",
        "parameters": [
          {
            "name": "id",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/GeneralError"
            }
          }
        }
      }
    },
    "/users/{userId}/stats": {
      "get": {
        "description": "Get user statistics",
        "tags": [
          "stats"
        ],
        "summary": "Get user statistics",
        "operationId": "getUserStats",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/GeneralError"
            }
          }
        }
      }
    },
    "/users/{userId}/urls": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Creates new url",
        "operationId": "createUrl",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          },
          {
            "name": "url",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Url"
            }
          },
          "404": {
            "description": "User not found"
          },
          "default": {
            "description": "error",
            "schema": {
              "$ref": "#/definitions/GeneralError"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "GeneralError": {
      "properties": {
        "code": {
          "type": "integer",
          "format": "int"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Stats": {
      "type": "object",
      "properties": {
        "hits": {
          "type": "integer"
        },
        "topUrls": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Url"
          }
        },
        "urlCount": {
          "type": "integer"
        }
      }
    },
    "Url": {
      "type": "object",
      "properties": {
        "hits": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "shortUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    }
  },
  "tags": [
    {
      "description": "User actions",
      "name": "users"
    },
    {
      "description": "Urls management",
      "name": "urls"
    },
    {
      "description": "System information",
      "name": "stats"
    }
  ]
}`))
}
